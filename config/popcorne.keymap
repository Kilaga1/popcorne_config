/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&mt {
    tapping-term-ms = <400>;
    quick-tap-ms = <175>;
    require-prior-idle-ms = <150>;
    flavor = "balanced";
};

&lt { tapping-term-ms = <400>; };

/ {
    combos {
        compatible = "zmk,combos";

        combo_esc {
            timeout-ms = <50>;
            key-positions = <1 2 3>;
            bindings = <&kp ESCAPE>;
        };

        combo_bksp {
            timeout-ms = <50>;
            key-positions = <10 9 8>;
            bindings = <&kp BACKSPACE>;
        };

        combo_tab {
            bindings = <&kp TAB>;
            key-positions = <13 14 15>;
        };

        combo_shift {
            bindings = <&kp LEFT_SHIFT>;
            key-positions = <25 26 27>;
        };

        combo_delete {
            bindings = <&kp DELETE>;
            key-positions = <21 22 20>;
        };

        combo_rshift {
            bindings = <&kp RIGHT_SHIFT>;
            key-positions = <33 34 32>;
        };

        exclm {
            bindings = <&kp EXCLAMATION>;
            key-positions = <1 13>;
        };

        at {
            bindings = <&kp AT_SIGN>;
            key-positions = <2 14>;
        };

        hash {
            bindings = <&kp HASH>;
            key-positions = <3 15>;
        };

        dllr {
            bindings = <&kp DOLLAR>;
            key-positions = <4 16>;
        };

        percnt {
            bindings = <&kp PERCENT>;
            key-positions = <5 17>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <6 18>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <7 19>;
        };

        str {
            bindings = <&kp ASTERISK>;
            key-positions = <8 20>;
        };

        leftparen {
            bindings = <&kp LPAR>;
            key-positions = <9 21>;
        };

        rparen {
            bindings = <&kp RPAR>;
            key-positions = <10 22>;
        };

        layout_switch {
            bindings = <&tog 4>;
            key-positions = <36 37 40 41>;
        };

        system_reset {
            bindings = <&sys_reset>;
            key-positions = <3 4 5 14>;
        };

        bootloader {
            bindings = <&bootloader>;
            key-positions = <15 16 17 26>;
        };

        system_layer_combo {
            bindings = <&mo 3>;
            key-positions = <36 37 38>;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            //         |   Q   |   W   |   E   |   R   |   T   |         |  Y   |   U   |   I   |   O   |   P   |       
            //         |   A   |   S   |   D   |   F   |   G   |         |  H   |   J   |   K   |   L   |   ;   |       
            //         |   Z   |   X   |   C   |   V   |   B   |         |  N   |   M   |   ,   |   .   |   /   |       
            //                         | LSHIFT|  SPC  |  LAY1 |         | ENTER| BCKSPC| LAY2  |
            bindings = <
                &kp Q  &kp W  &kp E   &kp R      &kp T        &kp Y          &kp U          &kp I             &kp O    &kp P     
                &kp A  &kp S  &kp D   &kp F      &kp G        &kp H          &kp J          &kp K             &kp L    &kp SEMI  
                &kp Z  &kp X  &kp C   &kp V      &kp B        &kp N          &kp M          &kp COMMA         &kp DOT  &kp FSLH  
                          &kp LSHIFT  &kp SPACE  &mo 1        &kp RET        &kp BACKSPACE  &mo 2
            >;
        };

        num_sym {
            // -----------------------------------------------------------------------------------------
            //         |  ESC  |SCR PIC| LANG  |       |       |         |   -   |   =   |   [   |   ]   |   \   | 
            //         |   1   |   2   |   3   |   4   |   5   |         |   6   |   7   |   8   |   9   |   0   |
            //         |ALT TAB|  CUT  | COPY  | PASTE |  SAVE |         |   _   |   +   |   {   |   }   |   |   | 
            //                         |  GUI  |       |  SPC  |         |       |  TAB  |  RALT |
            bindings = <   
                &kp ESCAPE        &kp LG(LS(S))    &kp LA(LEFT_SHIFT)   &trans           &trans       &kp MINUS      &kp EQUAL      &kp LBKT   &kp RBKT   &kp BSLH 
                &kp N1            &kp N2           &kp N3               &kp N4           &kp N5       &kp N6         &kp N7         &kp N8     &kp N9     &kp N0
                &kp LA(TAB)       &kp LC(X)        &kp LC(C)            &kp LC(V)        &kp LC(S)    &kp UNDER      &kp PLUS       &kp LBRC   &kp RBRC   &kp PIPE
                                  &kp LGUI         &trans               &kp SPACE        &trans       &kp TAB        &kp RALT
            >;
        };

        func {
            // -----------------------------------------------------------------------------------------
            //         |   F1  |   F2  |   F3  |   F4  |   F5  |         |   F6  |   F7  |   F8  |   F9  |  F10  | 
            //         |  BT1  |  BT2  |  BT3  |  BT4  |  BT5  |         |       |   UP  |       |       |   ~   | 
            //         | BT CLR|       |       |       |       |         |  LEFT | DOWN  | RIGHT |       |   `   | 
            //                         |  GUI  |       |  SPC  |         |  RET  |  TAB  |  RALT |
            bindings = <
                &kp F1        &kp F2            &kp F3                &kp F4          &kp F5          &kp F6       &kp F7          &kp F8        &kp F9  &kp F10
                &bt BT_SEL 0  &bt BT_SEL 1      &bt BT_SEL 2          &bt BT_SEL 3    &bt BT_SEL 4    &trans       &kp UP_ARROW    &trans        &trans  &kp TILDE
                &bt BT_CLR    &trans            &trans                &trans          &trans          &kp LEFT     &kp DOWN        &kp RIGHT     &trans  &kp GRAVE
                                                &kp LGUI              &trans          &trans          &trans       &trans          &trans
            >;
        };
    };
};
